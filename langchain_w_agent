
from langchain_community.vectorstores import AzureCosmosDBVectorSearch 
import json 
from langchain_openai import AzureOpenAIEmbeddings, AzureChatOpenAI
from langchain.schema.document import Document
from typing import List
from langchain.prompts import PromptTemplate
from langchain.schema import StrOutputParser
from langchain.schema.runnable import RunnablePassthrough
from langchain.agents import Tool
from langchain.agents.agent_toolkits import create_conversational_retrieval_agent
from langchain_core.messages import SystemMessage
from pymongo import MongoClient
from langchain.tools import StructuredTool

#TODO: Why use the lanchain class if azure already allows vector search 

env_file = []
with open('env.json', 'r') as f:
    env_file = json.load(f)

openai_llm = AzureChatOpenAI(            
        temperature = 0,
        openai_api_version = env_file["API_VERSION"],
        azure_endpoint = env_file["AOAI_ENDPOINT"],
        openai_api_key = env_file["AOAI_KEY"],         
        azure_deployment = "gpt-35-turbo-16k"
)

embedding_model = AzureOpenAIEmbeddings(
    openai_api_version = env_file["API_VERSION"],
    azure_endpoint = env_file["AOAI_ENDPOINT"],
    openai_api_key = env_file["AOAI_KEY"],   
    azure_deployment = "text-embedding-ada-002",
    chunk_size=10
)

def create_cosmic_works_vector_store_retriever(collection_name: str, top_k: int = 3):
    vector_store = AzureCosmosDBVectorSearch.from_connection_string(
        connection_string = env_file["CONNECTION_STRING"],
        namespace = f"projects-development.{collection_name}",
        embedding = embedding_model,
        index_name = "VectorSearchIndex",    
        embedding_key = "contentVector",
        text_key = "_id"
    )
    return vector_store.as_retriever(search_kwargs={"k": top_k})

products_retriever = create_cosmic_works_vector_store_retriever("products")
customers_retriever = create_cosmic_works_vector_store_retriever("customers")
sales_retriever = create_cosmic_works_vector_store_retriever("sales")

'''
Test for vector search with langchain class

# query = "What yellow products are there?"
# results = vector_store.similarity_search(query, k=3)
# for result in results:
#     print(result)

'''
def format_docs(docs:List[Document]) -> str:
    """
    Prepares the product list for the system prompt.
    """
    str_docs = []
    for doc in docs:
            # Build the product document without the contentVector
            doc_dict = {"_id": doc.page_content}
            doc_dict.update(doc.metadata)
            if "contentVector" in doc_dict:  
                    del doc_dict["contentVector"]
            str_docs.append(json.dumps(doc_dict, default=str))                  
    # Return a single string containing each product JSON representation
    # separated by two newlines
    return "\n\n".join(str_docs)

# Create the prompt template from the system_prompt text

products_retriever_chain = products_retriever | format_docs
customers_retriever_chain = customers_retriever | format_docs
sales_retriever_chain = sales_retriever | format_docs

tools = [
    Tool(
        name = "vector_search_products", 
        func = products_retriever_chain.invoke,
        description = "Searches Cosmic Works product information for similar products based on the question. Returns the product information in JSON format."
    ),
    Tool(
        name = "vector_search_customers", 
        func = customers_retriever_chain.invoke,
        description = "Searches Cosmic Works customer information and retrieves similar customers based on the question. Returns the customer information in JSON format."
    ),
    Tool(
        name = "vector_search_sales", 
        func = sales_retriever_chain.invoke,
        description = "Searches Cosmic Works customer sales information and retrieves sales order details based on the question. Returns the sales order information in JSON format."
    )
]

client = MongoClient(env_file["CONNECTION_STRING"])
db = client["projects_development"]

def get_product_by_id(product_id: str) -> str:
    """
    Retrieves a product by its ID.    
    """
    doc = db["products"].find_one({"id": product_id})
    if "contentVector" in doc:
        del doc["contentVector"]
    return json.dumps(doc)

def get_product_by_sku(sku: str) -> str:
    """
    Retrieves a product by its sku.
    """
    doc = db.products.find_one({"sku": sku})
    if "contentVector" in doc:
        del doc["contentVector"]
    return json.dumps(doc, default=str)

def get_sales_by_id(sales_id: str) -> str:
    """
    Retrieves a sales order by its ID.
    """
    doc = db.sales.find_one({"_id": sales_id})
    if "contentVector" in doc:
        del doc["contentVector"]
    return json.dumps(doc, default=str)   

def get_sales_by_sku(sku: str) -> str:
    """
    Retrieves a product by its sku.
    """
    doc = db.sales.find_one({"sku": sku})
    if "contentVector" in doc:
        del doc["contentVector"]
    return json.dumps(doc, default=str) 

def get_customers_by_id(customers_id: str) -> str:
    """
    Retrieves a sales order by its ID.
    """
    doc = db.customers.find_one({"_id": customers_id})
    if "contentVector" in doc:
        del doc["contentVector"]
    return json.dumps(doc, default=str)   

def get_customers_by_sku(sku: str) -> str:
    """
    Retrieves a product by its sku.
    """
    doc = db.customers.find_one({"sku": sku})
    if "contentVector" in doc:
        del doc["contentVector"]
    return json.dumps(doc, default=str) 

#TODO: How does it know which func to use
tools.extend([
    StructuredTool.from_function(get_product_by_id),
    StructuredTool.from_function(get_product_by_sku),
    StructuredTool.from_function(get_sales_by_id)
])

system_message = SystemMessage(
    content = """
        You are a helpful, fun and friendly sales assistant for Cosmic Works, a bicycle and bicycle accessories store.

        Your name is Cosmo.

        You are designed to answer questions about the products that Cosmic Works sells, the customers that buy them, and the sales orders that are placed by customers.

        If you don't know the answer to a question, respond with "I don't know."
        
        Only answer questions related to Cosmic Works products, customers, and sales orders.
        
        If a question is not related to Cosmic Works products, customers, or sales orders,
        respond with "I only answer questions about Cosmic Works"
    """    
)

agent_executor = create_conversational_retrieval_agent(openai_llm, tools, system_message = system_message, verbose=True)

result = agent_executor({"input": "are there products that cost over $300?"})
print("***********************************************************")
print(result['output'])